////
/// @group motion
////

/// The CSS transform property lets you modify the coordinate space of the CSS visual formatting model
/// @param {string} property [none]
/// @example scss - SCSS
///		.foo {
///			@include transform(rotate(50deg));
///		}
/// @example css - CSS output:
///		.foo {
///		    -moz-transform: rotate(50deg);
///		    -o-transform: rotate(50deg);
///		    -ms-transform: rotate(50deg);
///		    -webkit-transform: rotate(50deg);
///		    transform: rotate(50deg);
///		}
@mixin transform($property: none) {
  // none | <transform-function>
	@include prefixer(transform, $property, webkit moz ms o spec);
}

/// The transform-origin property lets you modify the origin for transformations of an element
/// @param {string} axes [50%]
/// @example scss - SCSS
///		.foo {
///			@include transform(rotate(30deg));
///			@include transform-origin(100% 100%);
///		}
/// @example css - CSS output:
///		.foo {
///    moz-transform-origin: 100% 100%;
///    -o-transform-origin: 100% 100%;
///    -ms-transform-origin: 100% 100%;
///    -webkit-transform-origin: 100% 100%;
///    transform-origin: 100% 100%;
///		}
@mixin transform-origin($axes: 50%) {
  // x-axis - left | center | right  | length | %
  // y-axis - top  | center | bottom | length | %
  // z-axis -                          length
	@include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

/// The transform-style CSS property determines if the children of the element are positioned in the 3D-space or are flattened in the plane of the element.
/// @param {string} property
/// @example scss - SCSS
///		.foo {
///			@include transform-style(flat);
///		}
/// @example css - CSS output:
///		.foo {
///			-webkit-transform-style: flat;
///			-moz-transform-style: flat;
///			-ms-transform-style: flat;
///			-o-transform-style: flat;
///			-spec-transform-style: flat;
///		}
@mixin transform-style($style: flat) {
	@include prefixer(transform-style, $style, webkit moz ms o spec);
}